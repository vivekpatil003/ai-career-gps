/**
 * Cloud Functions template (Node 18) to proxy calls to Vertex AI.
 * IMPORTANT: Do NOT put service account keys in source. Use Workload Identity or
 * set GOOGLE_APPLICATION_CREDENTIALS in the Cloud Function environment only for testing.
 *
 * This file contains examples of how you'd call Vertex AI Generative API using REST.
 * Replace `YOUR_PROJECT_ID` and the prompt logic as required.
 */

const axios = require('axios')

// Example: generate twin using Vertex AI REST API (pseudo-code)
exports.generateTwin = async (req, res) => {
  try {
    const profile = req.body.profile || {}
    const prompt = `Create an AI Career Twin JSON object for profile: ${JSON.stringify(profile)}. Return only JSON with fields id, title, summary, salary_range, score, suggestions.`

    const vertexEndpoint = process.env.VERTEX_API_ENDPOINT || 'https://us-central1-aiplatform.googleapis.com/v1/projects/YOUR_PROJECT/locations/us-central1/publishers/google/models/text-bison:predict'

    // NOTE: In production, use the official client libraries (google-cloud/aiplatform) and set up proper auth.
    // This is a minimal example showing request shape.
    const resp = await axios.post(vertexEndpoint, {
      instances: [{ prompt }]
    }, { headers: { 'Content-Type': 'application/json' } })

    res.json({
      id: `twin_${Date.now()}`,
      title: `${profile.name || 'Student'} - ${profile.skills?.[0] || 'Explorer'}`,
      summary: 'Generated by Vertex AI (template)',
      salary_range: '₹5L - ₹20L',
      score: 70,
      suggestions: []
    })
  } catch (err) {
    console.error(err)
    res.status(500).json({ error: err.toString() })
  }
}
